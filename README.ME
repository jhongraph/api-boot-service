# ðŸ¤– AutomatizaciÃ³n de Pre-venta-Registro con Selenium y Spring Boot

Este proyecto automatiza el proceso de **pre-venta-registro**
en el portal de vehÃ­culos, utilizando Selenium, Java y Spring Boot.
EstÃ¡ diseÃ±ado para ejecutarse como un `.jar` empaquetado
o dentro de un contenedor Docker.

utilizaciones
------------------------------------------
-JAVA JDK v21.0.6
-SPRING BOOT v3.4.4
-SELENIUM v4.19.1
-CHROME-DRIVE v2.0
-DOCKER-DESKTOP
-

---


## ðŸ§± Estructura del Proyecto

boot001/
â”œâ”€â”€ ChromeDriver/             # ChromeDriver para entorno Linux (uso en Docker)
â”œâ”€â”€ source/
â”‚   â””â”€â”€ main/
â”‚       â”œâ”€â”€ java/
â”‚       â”‚   â””â”€â”€ com/testboot/boot__001/
â”‚       â”‚       â”œâ”€â”€ config/             # Beans, WebDriverConfig, etc.
â”‚       â”‚       â”œâ”€â”€ env/                # Variables de entorno (inyectables)
â”‚       â”‚       â”œâ”€â”€ exections/          # Manejo de excepciones personalizadas
â”‚       â”‚       â”œâ”€â”€ pojo/
â”‚       â”‚       â”‚   â””â”€â”€ Car.java        # POJO con info del vehÃ­culo
â”‚       â”‚       â”œâ”€â”€ service/
â”‚       â”‚       â”‚   â””â”€â”€ PreSaleService.java
â”‚       â”‚       â”‚       # Servicio principal con el flujo completo
â”‚       â”‚       â””â”€â”€ utils/
â”‚       â”‚           â””â”€â”€ Generador.java  # GeneraciÃ³n de datos automÃ¡ticos
â”‚       â””â”€â”€ resources/
â”‚           â”œâ”€â”€ application.yaml        # ConfiguraciÃ³n general (variables de entorno)
â”‚           â””â”€â”€ logback.xml             # ConfiguraciÃ³n de logs
â”œâ”€â”€ target/                  # Carpeta generada con el `.jar`
â”œâ”€â”€ pom.xml                  # Dependencias y configuraciÃ³n Maven

ðŸ”„ Flujo automatizado del programa

1- Inicia sesiÃ³n en el portal de vehÃ­culos utilizando las credenciales definidas en el archivo
de configuraciÃ³n.

2- Navega a la secciÃ³n de Preventa: El programa dirige automÃ¡ticamente el navegador
 a la secciÃ³n de pre-venta-registro en el portal.

3- Rellena formularios con datos automÃ¡ticos:
El programa genera automÃ¡ticamente los datos requeridos (como marca, modelo, aÃ±o, etc.)
y los inserta en los formularios del portal.

4- Confirma y firma digitalmente: Una vez que se ha completado el formulario,
el programa confirma los datos ingresados y realiza la firma digital.

5- Carga el archivo PDF: El programa sube un archivo PDF especÃ­fico a la plataforma,
como parte del proceso de registro.

6- Repite el proceso: El flujo se repite el nÃºmero de veces indicado en el ciclo,
que puede ser configurado en el archivo application.yaml.



-----------------------------------------------------------------------------
estructura programada en Dockerfile
-----------------------------------------------------------------------------
â”œâ”€â”€ Dockerfile
â”œâ”€â”€ README.ME
â”œâ”€â”€ entryPoint.sh
â”œâ”€â”€ utilities
â”‚   â”œâ”€â”€ ChromeDriver
â”‚   â”‚   â”œâ”€â”€ chromedriver
â”‚   â”‚   â”œâ”€â”€ LICENSE.chromedriver
â”‚   â”‚   â”œâ”€â”€ THIRD_PARTY_NOTICES.chromedriver
â”‚   â”œâ”€â”€ pdfPrueva.pdf
â””â”€â”€ â””â”€â”€ Vins.txt

variables de entorno disponibles para dinamizar su valor
-------------------------------------------------------------------------------
-e UTILITIES_USER1="jovidio"        --> username usuario simulado
-e UTILITIES_USER2="nmartinez"      ---> contraseÃ±a usuario simulado
-e UTILITIES_USER3="jrivera5"
-e UTILITIES_USER4="ccartagena33057"
-e UTILITIES_PASSWORD1="123456"
-e UTILITIES_PASSWORD2="123456"
-e UTILITIES_PASSWORD3="Pdv#001"
-e UTILITIES_PASSWORD4="Pdv#001"
-e UTILITIES_CONCESIONARIO="SJ2124"    ----> numero de licencia concesionario de pruebas
-e UTILITIES_LICENCE="7006169"         ----> licencia de conducir de comprador de pruebas
-e UTILITIES_MODE="PROD"               ---->  a la hora de crear el contenedor es de suma importancia
                                              que usemos el valor "test" si se trata del portal de
                                              test o mantenerlo vacio o cualquier otro valor si
                                              se trata del portal de pre-prod, esto por los campos faltantes
                                              en pre-prod, por lo que se puede usar esta imagen para la creacion
                                              de ambos contenedores.

-e UTILITIES_BASE_URL="https://pdvprod-preprod.azurewebsites.net/"  ---> url base + /
-e UTILITIES_LOGIN_URL="Forms/Account/LoginNew.aspx"                ---> url login(sin la parte base)
-e UTILITIES_HOME_URL="Default.aspx"                                ---> url home(sin la parte base)
-e UTILITIES_PREVENTA_URL="Forms/CarPartialRegistrationBatch.aspx"  ---> url pre-venta en lote
-e UTILITIES_PDF_ROUTE="/app/utilities/pdfPrueva.pdf"               ---> ruta a pdf de prueba
-e UTILITIES_CICLO="300"                                            ---> cantidad de tareas por usuario requeridas
-e UTILITIES_USERS_ACTIVES="2"                                      ---> cantidad de 1 - 4 para activar simultanea mente
-e UTILITIES_WAIT_TIME_OUT="60"                                     ---> tiempo de espera por accion
-e UTILITIES_VIN_BANCK_ROUTE="/app/utilities/Vins.txt"              ---> txt banco de vins validos para pruevas
-e CHROME_DRIVER_PATH="/app/utilities/ChromeDriver/chromedriver"    ---> ruta al archivo de chrome-driver

de querer cambiar uno de estos valores a la hora de crear contenedores, tomar en cuenta la estructura
ya que decidi copiar todos los archivos y directorios en la /app...


